package com.pluralsight;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class mainCLI {

    public void main(String[] args) {

        menuLoop();
    } //Menu? I think it goes here?

    public static void menuLoop() {
        Scanner scanner = new Scanner(System.in);
        final char[] option = new char[1];

        class displayBanner {
            final displayBanner displayBanner = new displayBanner();

            public void displayBanner() {
                String fileName = "C:/Users/Student/OneDrive - Year Up- BOS/Desktop/Year Up Courses/PluralSight/Year Up United Projects/LearnToCode_Capstones/CapstoneBankBanner.txt";

                displayBanner();

                //IO for the banner
                try (BufferedReader reader = new BufferedReader(new FileReader("CapstoneBankBanner.txt"))) {
                    String line = "";
                    while (line.equals(reader.readLine())) System.out.println(line);
                } catch (IOException e) {
                    System.out.println("Error reading the GPFC banner file.");
                    e.printStackTrace();
                }
            }
        }

        //Date and time config
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy HH:mm:ss");
        String formattedDateTime = currentDateTime.format(formatter);

        //Menu starts here!

        do {
            System.out.println("Today's Date and Time: " + formattedDateTime);
            System.out.println("══════════════════════════════════════════════════════════════");
            System.out.println("Please type in the letter that matches the option needed: ");
            System.out.println("D) Add Deposit");
            System.out.println("P) Make Payment");
            System.out.println("L) View Past Ledger Information");
            System.out.println("R) View Past Report Information");
            System.out.println("X) Exit the Application");
            System.out.println("Please enter the required letter here: ");
            System.out.println("══════════════════════════════════════════════════════════════");
            option[0] = scanner.nextLine().toUpperCase().charAt(0);

            //Initializing menu loop...

            switch (option[0]) {
                case 'D':
                    //Make the variables to ask for here:
                    String date1 = ""; //Current date
                    String time1 = ""; //Current time
                    String description1 = ""; //Description of item, like 'vacuum cleaner'
                    String vendor1 = ""; //Who paid you/who did you pay?
                    String type1 = ""; //Are you getting paid or paying someone else?
                    double amount1 = 0; //Amount that you're receiving or paying

                    System.out.println("══════════════════════════════════════════════════════════════");
                    System.out.println("Please enter in the description of your transaction: ");
                    description1 = scanner.nextLine();

                    System.out.println("Please enter in the name or business that you received the deposit from: ");
                    vendor1 = scanner.nextLine();

                    System.out.println("Please enter the amount of the deposit you would like to make: ");
                    amount1 = scanner.nextDouble();
                    scanner.nextLine();

                    System.out.println("Last Transaction Input Recorded: " + description1 + date1 + time1 + vendor1 + amount1);
                    System.out.println("═════════════════════════════════════════════════════════════");
                    break;

                    //Payment Info
                    case 'P':

                        //Make the variables to ask for here:
                        String date2 = ""; //Current date
                        String time2 = ""; //Current time
                        String description2 = ""; //Description of item, like 'vacuum cleaner'
                        String vendor2 = ""; //Who paid you/who did you pay?
                        String type2 = ""; //Are you getting paid or paying someone else?
                        double amount2 = 0; //Amount that you're receiving or paying

                        System.out.println("══════════════════════════════════════════════════════════════");
                        System.out.println("Please enter in the description of the payment: ");
                        description2 = scanner.nextLine();

                        System.out.println("Please enter in the name or business the payment was sent to: ");
                        vendor2 = scanner.nextLine();

                        System.out.println("Please enter the amount of the payment: ");
                        amount2 = scanner.nextDouble();
                        scanner.nextLine();

                        System.out.println("Last Transaction Input Recorded: " + description2 + date2 + time2 + vendor2 + amount2);
                        System.out.println("══════════════════════════════════════════════════════════════");
                        break;

                        //Ledger Screen
                        case 'L':

                            System.out.println("══════════════════════════════════════════════════════════════");
                            System.out.println("Would you like to view ledgers sorted by:");
                            System.out.println("A) All - Displays all ledgers currently available to access.");
                            System.out.println("D) Only the currently available deposits.");
                            System.out.println("P) Only the currently available payments.");
                            System.out.println("Please enter the letter of your desired search:");
                            System.out.println("══════════════════════════════════════════════════════════════");
                            break;

                        //Reports Screen
                        case 'R':

                            System.out.println("══════════════════════════════════════════════════════════════");
                            System.out.println("Would you like to view reports sorted by:");
                            System.out.println("Transactions Listed by Month to Date");
                            System.out.println("Transactions From Previous Month");
                            System.out.println("Transactions From Previous Year to Date");
                            System.out.println("Transactions From Previous Year");
                            System.out.println("Transactions From A Specific Vendor");
                            System.out.println("0) Go to Previous Page");
                            System.out.println("0) Go to Home Page");
                            System.out.println("══════════════════════════════════════════════════════════════");
                            break;


                        //Ending Screen
                        case 'X':

                            System.out.println("══════════════════════════════════════════════════════════════");
                            System.out.println("Thank you for your patronage, have a wonderful day!");
                            System.out.println("Golden Phoenix Financial Corporation: Blaze a path to better finances.");
                            System.out.println("══════════════════════════════════════════════════════════════");
                            break;
                        }


            }
                while (option[0] != 'X') ;
                scanner.close();
            }
        }

package com.pluralsight;

import java.util.List;
import java.time.LocalDate;
import java.util.Scanner;
import java.util.stream.Collectors;

    public class reportsLogic {

        //Month-to-date
        public static List<transaction> generateMonthtoDateReport(List<transaction> transactions) {
            LocalDate today = LocalDate.now();
            LocalDate startOfMonth = today.withDayOfMonth(1);
            return generateReportByDateRange(transactions, startOfMonth, today);
        }

        //Year-to-date
        public static List<transaction> generateMonthtoDateReport(List<transaction> transactions) {
            LocalDate today = LocalDate.now();
            LocalDate startOfYear = today.withDayOfYear(1);
            return generateReportByDateRange(transactions, startOfYear, today);


            //And now to bring it all together in one document... hopefully.
            public static void displayReport (List <transaction> filteredTransactions);
            if (filteredTransactions.isEmpty()) {
                System.out.println("No transactions found for the specified range.");
            } else {
                for (Transaction transaction : filteredTransactions) {
                    System.out.println(transaction);

                    //Vendor searching now. Fancy.
                    class TransactionSearch {

                        public static List<Transaction> generateReportByVendor(List<Transaction> transactions, String vendorName) {
                            return transactions.stream()
                                    .filter(t -> t.getVendor().equalsIgnoreCase(vendorName))
                                    .collect(Collectors.toList());

                            //Back to more familiar waters.
                            public static void searchAndDisplayByVendor (List < transaction > transactions) {
                                Scanner scanner = new Scanner(System.in);
                                System.out.println("Enter the vendor's name to start your search: ");
                                String vendorName = scanner.nextLine();

                                //Oh how I've missed the if/else statements.
                                List<Transaction> matchingTransactions = generateReportByVendor(transactions, vendorName);
                                if (matchingTransactions.isEmpty()) {
                                    System.out.println("No transactions found for the vendor: " + vendorName + "were found. Please try again.");
                                } else {
                                    System.out.println("Transactions for vendor: " + vendorName);
                                    for (Transaction transaction : matchingTransactions) {
                                        System.out.println(transaction);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

package com.pluralsight;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;
import java.util.Collections;
import java.util.Comparator;

//make the transaction variable and document it'll read from.
public class transactions() {
    private Object description;
    private Object vendor;
    private Object mytype;
    private LocalDate mydate;
    private LocalTime mytime;
    private double amount;

    public transactions(LocalDate mydate, String description, String vendor, String paymenttype, double myamount) {
        description = description;
        vendor = vendor;
        mytype = paymenttype;
        mydate = mydate;
        amount = myamount;
    }

    //Ready... Getters, Setters, Go!
    //Date Get-Set
    public String getDate() {
        return String.valueOf(mydate);
    }

    public void setDate(String date) {
        mytime = LocalTime.parse(getTime());
    }


    //Time Get-Set
    public String getTime() {
        return String.valueOf(mytime);
    }

    public void setTime(String time) {
        mydate = LocalDate.from(LocalTime.parse(getTime()));
    }


    //Description Get-Set
    public String getDescription() {
        return String.valueOf(description);
    }

    public void setDescription(String description) {
        description = getDescription();
    }


    //Vendor Get-Set
    public String getVendor() {
        return String.valueOf(vendor);
    }

    public void setVendor(String vendor) {
        vendor = getVendor();
    }


    //Type Get-Set
    public String getType() {
        return String.valueOf(mytype);
    }

    public void setType(String type) {
        type = getType();
    }


    //Amount Get-Set
    public String getAmount(Double amount) {
        return String.valueOf(amount);
    }

    public void setAmount(Double amount) {
        amount = setAmount();
    }


    public static void readTransactionsInCSV() {

        ArrayList<Object> transactions = new ArrayList<>();

        Scanner reader = new Scanner(System.in);
        String filename = "transactions.csv";
        try (BufferedReader bfreader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = bfreader.readLine()) != null) {
                String[] fields = line.split(",");
                LocalDate date = LocalDate.parse(fields[0]);
                LocalTime time = LocalTime.parse(fields[1]);
                String description = fields[2];
                String vendor = fields[3];
                double amount = Double.parseDouble(fields[4]); // Assuming TransactionLogicAndIO is a valid class transactions.add(new TransactionLogicAndIO(date, time, amount)); } } catch (IOException e) { System.out.println("An error occurred while trying to access and read this file. Please try again."); e.printStackTrace(); } // Return an unmodifiable list of transactions return Collections.unmodifiableList(transactions); } }

                transactions.add(new transactions(date, description, vendor, "all", amount)); }

            class TransactionLogic {

                // Writes the list of transactions to a CSV file
                public static <TransactionLogic> void writeTransactionsInCSV(List<TransactionLogic> transactions, String filename) {
                    try (FileWriter writer = new FileWriter(filename, true)) { // Appending to the file
                        for (TransactionLogic transaction : transactions) {
                            writer.write(transaction.toString() + "\n");
                        }
                    } catch (IOException e) {
                        System.out.println("An error occurred while writing to the CSV.");
                        e.printStackTrace();
                    }
                }

                // Adds a deposit and a payment transaction to the list
                public static void addTransactions(List<TransactionLogic> transactions, TransactionHandler handler) {
                    Transaction deposit = handler.addDeposit();
                    transactions.add(deposit);

                    Transaction payment = handler.addPayment();
                    transactions.add(payment);
                }

                // Displays the list of transactions
                public static void displayTransactions(List<TransactionLogic> transactions) {
                    for (TransactionLogic transaction : transactions) {
                        System.out.println("Date: " + transaction.getDate() +
                                ", Time: " + transaction.getTime() +
                                ", Amount: " + transaction.getAmount());
                    }
                }

                // Sorts the transactions by date
                public static void sortTransactionsByDate(List<TransactionLogic> transactions) {
                    Collections.sort(transactions, Comparator.comparing(TransactionLogic::getDate));
                }

                // Mock method for adding a deposit (to be replaced with actual implementation)
                public Transaction addDeposit() {
                    // Add logic to handle deposit creation
                    return new Transaction();
                }

                // Mock method for adding a payment (to be replaced with actual implementation)
                public Transaction addPayment() {
                    // Add logic to handle payment creation
                    return new Transaction();
                }
            }
        }
    }
}

